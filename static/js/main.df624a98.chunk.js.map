{"version":3,"sources":["FormGroup.js","PersonRow.js","ScreenPaste.js","ScreenRows.js","Select.js","App.js","serviceWorker.js","index.js"],"names":["FormGroup","React","memo","_ref","val","change","id","name","label","_ref$type","type","react_default","a","createElement","className","htmlFor","onChange","placeholder","value","PersonRow","person","count","remove","classes","concat","src_FormGroup","fname","lname","email","data-id","onClick","ScreenPaste","props","ref","textarea","add","toggle","ScreenRows","select","toggleView","children","addPerson","Select","active","o","i","push","key","options","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","optionsCount","createRef","genId","Math","random","toString","substr","makeEntry","arguments","length","undefined","state","rowData","showRows","addPeople","bind","assertThisInitialized","changeRowCount","onInputChange","removeRow","_this2","current","split","indexOf","entries","map","p","filter","entry","setState","toConsumableArray","e","target","len","msg","window","confirm","row","diff","newRows","prop","match","filtered","updatedIndex","updated","assign","defineProperty","splice","dataset","_this3","src_ScreenRows","src_Select","src_PersonRow","src_ScreenPaste","Component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df624a98.chunk.js","sourcesContent":["import React from 'react'\n\nconst FormGroup = React.memo(function FormGroup({ val, change, id, name, label, type = 'text' }) {\n  return (\n    <div className=\"col form-group\">\n      <label htmlFor={name + id}>{label}</label>\n      <input\n        className=\"form-control\"\n        id={name + id}\n        name={name + id}\n        onChange={change}\n        placeholder={label}\n        type={type}\n        value={val} />\n    </div>\n  )\n})\n\nexport default FormGroup","import React from 'react'\nimport FormGroup from './FormGroup'\n\nconst PersonRow = React.memo(function PersonRow({ person, count, remove, change }) {\n  const classes = `pt-1 person-row form-row ${(count + 1) % 2 ? 'odd' : 'even'}`\n  return (\n    <div className={classes}>\n      <FormGroup\n        change={change}\n        id={person.id}\n        label='First Name'\n        name='fname'\n        val={person.fname} />\n      <FormGroup\n        change={change}\n        id={person.id}\n        label='First Name'\n        name='lname'\n        val={person.lname} />\n      <FormGroup\n        change={change}\n        id={person.id}\n        label='Email'\n        name='email'\n        type='email'\n        val={person.email} />\n      <div className=\"col\">\n        {\n          count !== 0 ?\n            <button data-id={person.id} className=\"close\" onClick={remove}>X</button> :\n            false\n        }\n      </div>\n    </div>\n  )\n})\n\nexport default PersonRow","import React from 'react'\n\nfunction ScreenPaste(props) {\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n        <textarea ref={props.textarea} className=\"peopleTextarea\" placeholder=\"Paste from spreadsheet here\"></textarea>\n        <div className=\"pt-1\">\n          <button className=\"btn btn-primary mr-1\" onClick={props.add}>Add People</button>\n          <button className=\"btn btn-secondary\" onClick={props.toggle}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ScreenPaste","import React from 'react'\n\nconst ScreenRows = React.memo(function ScreenRows(props) {\n  return (\n    <div>\n      <div>\n        <span className=\"mr-2\">person count</span>\n        {props.select}\n        <button className=\"btn btn-info\" onClick={props.toggleView}>Paste from spreadsheet</button>\n      </div>\n      {props.children}\n      <button className=\"btn btn-secondary mt-2\" onClick={props.addPerson}>+ Add Person</button>\n    </div>\n  )\n})\n\nexport default ScreenRows","import React from 'react'\n\nconst Select = React.memo(function Select(props) {\n  function options() {\n    let o = []\n    for (let i = 1; i <= props.count; i++) {\n      o.push(<option key={i} value={i}>{i}</option>)\n    }\n    return o\n  }\n\n  return (\n    <select className=\"mr-2\" value={props.active} onChange={props.change}>\n      {options()}\n    </select>\n  )\n})\n\nexport default Select","import React from 'react';\nimport PersonRow from './PersonRow'\nimport ScreenPaste from './ScreenPaste'\nimport ScreenRows from './ScreenRows'\nimport Select from './Select'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.optionsCount = 50\n    this.textarea = React.createRef()\n    this.genId = function () {\n      return Math.random().toString().substr(2, 15)\n    }\n\n    this.makeEntry = function (fname = '', lname = '', email = '') {\n      return {\n        fname,\n        lname,\n        email,\n        id: this.genId()\n      }\n    }\n\n    this.state = {\n      rowData: [this.makeEntry()],\n      showRows: true,\n    }\n\n    this.addPeople = this.addPeople.bind(this)\n    this.addPerson = this.addPerson.bind(this)\n    this.changeRowCount = this.changeRowCount.bind(this)\n    this.onInputChange = this.onInputChange.bind(this)\n    this.removeRow = this.removeRow.bind(this)\n    this.toggleView = this.toggleView.bind(this)\n  }\n\n  addPeople() {\n    const val = this.textarea.current.value\n    const split = val.indexOf('\t') > -1 ? '\t' : val.indexOf(',') > -1 ? ',' : ' '\n    let entries = val.split('\\n').map(p => p.split(split))\n    // remove arrays of all empty values\n    entries = entries.filter(entry => entry[0] || entry[1] || entry[2])\n    entries = entries.map(entry => this.makeEntry(entry[0], entry[1], entry[2]))\n    entries = entries.length ? entries : [this.makeEntry()]\n\n    this.setState({\n      rowData: entries,\n      showRows: true\n    })\n  }\n\n  addPerson() {\n    this.setState({\n      rowData: [...this.state.rowData, this.makeEntry()]\n    })\n  }\n\n  changeRowCount(e) {\n    const val = e.target.value\n    const len = this.state.rowData.length\n\n    if (val < len) {\n      const count = len - val\n      const msg = `Warning! This will remove the last ${count} row${count > 1 ? 's' : ''}!`\n      if (window.confirm(msg)) {\n        this.setState({\n          rowData: this.state.rowData.filter((row, i) => i < val)\n        })\n      }\n    } else {\n      let diff = val - len\n      let newRows = []\n      for (let i = 0; i < diff; i++) {\n        newRows.push(this.makeEntry())\n      }\n\n      this.setState({\n        rowData: [...this.state.rowData, ...newRows]\n      })\n    }\n  }\n\n  onInputChange({ target }) {\n    const val = target.value\n    const prop = target.id.match(/[a-z]+/g)[0]\n    const id = target.id.match(/[0-9]+/g)[0]\n    let filtered = this.state.rowData.filter(row => row.id !== id)\n    let updatedIndex = -1\n    let updated = this.state.rowData.filter((row, i) => {\n      if (row.id === id) updatedIndex = i\n      return row.id === id\n    })\n    updated = Object.assign({}, updated[0], { [prop]: val })\n    filtered.splice(updatedIndex, 0, updated)\n\n    this.setState({\n      rowData: filtered\n    })\n  }\n\n  removeRow(e) {\n    this.setState({\n      rowData: this.state.rowData.filter(row => row.id !== e.target.dataset.id)\n    })\n  }\n\n  toggleView() {\n    this.setState({\n      showRows: !this.state.showRows\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid p-4\">\n        {\n          this.state.showRows ?\n            <ScreenRows\n              select={<Select change={this.changeRowCount} count={this.optionsCount} active={this.state.rowData.length} />}\n              addPerson={this.addPerson}\n              toggleView={this.toggleView}>\n              {this.state.rowData.map((row, i) => <PersonRow\n                change={this.onInputChange}\n                count={i}\n                key={row.id}\n                person={row}\n                remove={this.removeRow} />)}\n            </ScreenRows> :\n            <ScreenPaste textarea={this.textarea} toggle={this.toggleView} add={this.addPeople} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}